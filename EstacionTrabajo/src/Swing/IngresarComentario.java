/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Swing;

import DataBeans.ListaDataJuego;
import Datatypes.DataInfoJuego;
import Datatypes.DataJuego;
import Datatypes.DataNodoComentario;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import tprog.FabricaSistema;
import tprog.InterfazCategoriaJuego;

/**
 *
 * @author Usuario
 */
public class IngresarComentario extends javax.swing.JInternalFrame {

    /**
     * Creates new form IngresarComentario
     */
    private DefaultMutableTreeNode nodoPinchado = null;
    public class MyTableModel extends DefaultTableModel {
           public MyTableModel() {
                super();
            }
            public boolean isCellEditable(int row, int col) {
                return false;
             }
     }

    private IngresarComentario.MyTableModel modeloJ = new IngresarComentario.MyTableModel();
    private InterfazCategoriaJuego icj = FabricaSistema.getInstance().getInterfazCategoriaJuego();
    private String nj;
    public IngresarComentario() {
        initComponents();
        
        tablaJuegos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modeloJ.addColumn("Nombre Juego");
        ListaDataJuego l = icj.listarJuegos(); 
        List<DataJuego> ldj = l.getLista();
        Iterator it = ldj.iterator();
        while (it.hasNext()){
            DataJuego data = (DataJuego) it.next();
            Object [] fila = new Object[1];
            fila[0] = data.getNombre();
            modeloJ.addRow (fila); // Añade una fila al final
        }
         
        /****************** INICIALIZACION ARBOL COMENTARIOS *******************/

        DefaultTreeModel modelo = (DefaultTreeModel)arbol.getModel();
        DefaultMutableTreeNode cabeza = new DefaultMutableTreeNode ("Comentarios");
        modelo.setRoot(cabeza);
        arbol.setModel(modelo);

        
    }
    
    private void AgregarComentarios(DefaultMutableTreeNode nodo, List<DataNodoComentario> comments){

        Iterator it = comments.iterator();

        while(it.hasNext()){
            DataNodoComentario c = (DataNodoComentario) it.next();
            String f = c.getContenido().getFecha();
            String n = c.getContenido().getNick();
            String t = c.getContenido().getTexto();
            String id = c.getContenido().getId();
            String Com = "<html><font size=1 color=#BDBDBD >"+ id +"</font> ["+ f + " - Por " + n + "] <br><b>" + t +"<b></html>";

            DefaultMutableTreeNode n1 = new DefaultMutableTreeNode (Com);
            nodo.add(n1);
            
            List<DataNodoComentario> resp = c.getRespuestas();
            AgregarComentarios(n1,resp);
        }
        
         

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new panel("/Imagenes/Fondo.jpg");
        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaJuegos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        comentario = new javax.swing.JTextArea();
        Confirmar = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nickCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        estrellas = new javax.swing.JSpinner();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ingresar Comentario");

        arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                arbolMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(arbol);

        tablaJuegos.setModel(this.modeloJ);
        tablaJuegos.setToolTipText("");
        tablaJuegos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaJuegosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaJuegos);

        comentario.setColumns(20);
        comentario.setRows(5);
        jScrollPane3.setViewportView(comentario);

        Confirmar.setText("Confirmar");
        Confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmarActionPerformed(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sylfaen", 1, 14));
        jLabel1.setText("Ingresar Comentario: ");

        jLabel2.setFont(new java.awt.Font("Sylfaen", 1, 12));
        jLabel2.setText("Ingresar Nick Cliente: ");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 1, 12));
        jLabel3.setText("Calificación: ");

        estrellas.setModel(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(594, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(29, 29, 29)
                .addComponent(estrellas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(142, 142, 142)
                            .addComponent(Confirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(nickCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(211, 211, 211))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)))))
                    .addGap(18, 18, 18)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(329, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(estrellas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(178, 178, 178))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                            .addGap(36, 36, 36)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(nickCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(13, 13, 13)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Confirmar)
                                .addComponent(Cancelar)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE))
                    .addGap(22, 22, 22)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaJuegosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaJuegosMouseClicked
        int F = tablaJuegos.rowAtPoint(evt.getPoint());
        String nomJuego = (String)tablaJuegos.getValueAt(F, 0);
        icj.setNombreJuego(nomJuego);
        nj = nomJuego;
        DataInfoJuego dij = icj.seleccionarJuego(nomJuego);
        
        /****************** INICIALIZACION ARBOL COMENTARIOS *******************/

        DefaultTreeModel modelo = (DefaultTreeModel)arbol.getModel();
        DefaultMutableTreeNode cabeza = new DefaultMutableTreeNode ("Comentarios");
        modelo.setRoot(cabeza);
        arbol.setModel(modelo);
        
        /******************** AGREGACION DE LOS COMENTARIOS ********************/
        List<DataNodoComentario> comments = dij.getComentarios();
        if (!comments.isEmpty())
           AgregarComentarios(cabeza, comments);
    }//GEN-LAST:event_tablaJuegosMouseClicked

    private void arbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolMouseClicked
        
        TreePath p = arbol.getClosestPathForLocation(evt.getX(),evt.getY());
        nodoPinchado = (DefaultMutableTreeNode) p.getLastPathComponent();     
        
    }//GEN-LAST:event_arbolMouseClicked

    private void ConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmarActionPerformed
        
        if (comentario.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "No se ha ingresado texto"); 
        }else{
            if (nickCliente.getText().length() == 0){
                JOptionPane.showMessageDialog(null, "No se ha ingresado nick cliente"); 
            }else{
                
                if(icj.perteneceUsuario(nickCliente.getText())){
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM HH:mm");
                    Date date = new Date();
                    String fecha = dateFormat.format(date);

                    Integer e = (Integer) estrellas.getValue();

                    boolean ok = icj.ingresarDatos(comentario.getText(), fecha, nickCliente.getText(),e);
                    if(!ok){
                        JOptionPane.showMessageDialog(null, "El cliente ingresado no tiene permitido comentar este juego");
                        comentario.setText("");
                        nickCliente.setText("");
                    }else{
                        DefaultTreeModel modelo = (DefaultTreeModel)arbol.getModel();
                        DefaultMutableTreeNode cabeza = (DefaultMutableTreeNode) modelo.getRoot();


                        if ((nodoPinchado == null)||(nodoPinchado.equals(cabeza))){
                            String id =  "";
                           
                            icj.agregarComentario(id);
                            icj.NotificarClientes(1);
                            int i = cabeza.getChildCount();
                            String Com = "<html><font size=1 color=#BDBDBD >"+ i +"</font> ["+ fecha + " - Por " + nickCliente.getText() + "] <br><b>" + comentario.getText() +"<b></html>";
                            DefaultMutableTreeNode n1 = new DefaultMutableTreeNode (Com);
                            cabeza.add(n1);
                        }else{
                            String id = nodoPinchado.toString();
                            id = id.substring(34);
                            char[] ident = id.toCharArray();
                            int i = 0;
                            String idfinal = "";

                            while (ident[i] != '<'){
                                idfinal = idfinal + ident[i];
                                i++;
                            }
                            icj.agregarComentario(idfinal);

                            String idActual = Integer.toString(nodoPinchado.getChildCount());
                            String Com = "<html><font size=1 color=#BDBDBD >"+ idfinal+"."+idActual +"</font> ["+ fecha + " - Por " + nickCliente.getText() + "] <br><b>" + comentario.getText() +"<b></html>";
                            DefaultMutableTreeNode n1 = new DefaultMutableTreeNode (Com);
                            nodoPinchado.add (n1);

                        }
                        //icj.agregarComentario();
                        modelo = new DefaultTreeModel(cabeza);
                        arbol.setModel(modelo);

                        JOptionPane.showMessageDialog(null, "Comentario ingresado con éxito");
                        nodoPinchado=null;
                    }
                }else{
                    
                    JOptionPane.showMessageDialog(null, "El usuario no pertenece al sistema");  
                    nickCliente.setText("");
                    
                }
            }
            
        }
    }//GEN-LAST:event_ConfirmarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton Confirmar;
    private javax.swing.JTree arbol;
    private javax.swing.JTextArea comentario;
    private javax.swing.JSpinner estrellas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nickCliente;
    private javax.swing.JTable tablaJuegos;
    // End of variables declaration//GEN-END:variables
}
